float2 hash(int x, int y, int seed) {
  int hash = x * 73856093 ^ y * 19349663 ^ seed * 83492791;
  hash = ((hash >> 13) ^ hash >> 7);
  float angle = (float)hash;
  return (float2)(cos(angle), sin(angle));
}

float2 lerp(float2 a, float2 b, float t) {
  return a + t * (b - a);
}

const int2 offsets[4] = {(int2)(0, 0), (int2)(1, 0), (int2)(0, 1), (int2)(1, 1)};

float2 noise(float2 coords) {
  int2 i = (int2)(floor(coords.x), floor(coords.y));

  float2 gradients[4];
  for (int j = 0; j < 4; j++) {
    gradients[j] = hash(i.x + offsets[j].x, i.y + offsets[j].y, 0);
  }

  float2 dists[4];
  for (int j = 0; j < 4; j++) {
    dists[j] = coords - (float2)(i.x + offsets[j].x, i.y + offsets[j].y);
  }

  float2 dotProducts[4];
  for (int j = 0; j < 4; j++) {
    dotProducts[j] = dot(dists[j], gradients[j]);
  }

  float x = smoothstep(0.0f, 1.0f, coords.x - i.x);
  float y = smoothstep(0.0f, 1.0f, coords.y - i.y);

  float2 a = lerp(dotProducts[0], dotProducts[1], x);
  float2 b = lerp(dotProducts[2], dotProducts[3], x);

  float2 out = lerp(a, b, y);
  return out * 0.5f + 0.5f;
}

const __constant float longs1[4] = {439.0f, 1710.0f, 5474.0f, 2403.0f};
const __constant float longs2[4] = {30.0f, 6.0f, 60.0f, 3.0f};

const __constant float4 allWhite[4] = {(float4)(0.8f, 0.8f, 1.0f, 1.0), (float4)(0.9f, 0.8f, 1.0f, 1.0), (float4)(1.0f, 0.9f, 0.8f, 1.0), (float4)(1.0f, 1.0f, 1.0f, 1.0)};
const __constant float4 nebulaColors[4] = {(float4)(0.8f, 0.8f, 1.0f, 1.0), (float4)(0.2f, 0.2f, 1.0f, 1.0), (float4)(2.0f, 2.0f, 1.0f, 1.0), (float4)(0.4f, 0.4f, 1.0f, 1.0)};

const float4 applyWavelengths(__constant const float wavelengths[4], int x, int y, __constant const float4 colors[4], const float scale, float4 bias) {
  for (int i = 0; i < 4; i++) {
    float2 p = (float2)(x, y) / wavelengths[i];
    float2 calc = noise(p);
    bias += colors[i] * calc.x * scale;
  }
  bias.w = 1.0f;
  return bias;
}

__kernel void nebula(__global float4 *out) {
  int x = get_global_id(0);
  int y = get_global_id(1);

  int oX = x - get_global_offset(0);
  int oY = y - get_global_offset(1);

  int flatCoord = (oY * get_global_size(0) + oX);

  float4 first = applyWavelengths(longs1, x, y, allWhite, 1.0f, (float4)(0.0f, 0.0f, 0.0f, 0.0f));
  float4 second = applyWavelengths(longs2, x, y, nebulaColors, 0.4f, (float4)(1.0f, 1.0f, 1.3f, 0.0f));
  float4 ret = clamp(second - first, (float4)(0.0f, 0.0f, 0.0f, 0.0f), (float4)(1.0f, 1.0f, 1.0f, 0.0f));

  out[flatCoord] = ret;
}

const float4 doStars(__constant const float wavelengths[5], int x, int y, __constant const float biases[5], __constant const float scales[5]) {
  float value = 0.0f;
  for (int i = 0; i < 5; i++) {
    float2 p = (float2)(x, y) / wavelengths[i];
    float2 calc = noise(p);
    calc.x = clamp(calc.x + biases[i], 0.0f, 1.0f) * scales[i];
    value += calc.x;
  }
  value /= 5.0f;
  value = smoothstep(0.5f, 0.63f, value);
  return (float4)(value, value, value, 1.0f);
}

const __constant float starWavelengths[5] = {2.0f, 3.0f, 5.0f, 15.0f, 100.0f};
const __constant float starBiases[5] = {0.0f, -0.1f, 0.0f, -0.4f, -0.4f};
const __constant float starScales[5] = {1.0f, 2.0f, 1.0f, 0.5f, 0.5f};

__kernel void starBackground(__global float4 *out) {
  int x = get_global_id(0);
  int y = get_global_id(1);

  int oX = x - get_global_offset(0);
  int oY = y - get_global_offset(1);

  int flatCoord = (oY * get_global_size(0) + oX);

  out[flatCoord] = doStars(starWavelengths, x, y, starBiases, starScales);
}

