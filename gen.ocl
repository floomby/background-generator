float2 hash(int x, int y, int seed) {
  int hash = x * 73856093 ^ y * 19349663 ^ seed * 83492791;
  hash = ((hash >> 13) ^ hash >> 7);
  float angle = (float)hash;
  return (float2)(cos(angle), sin(angle));
}

float2 lerp(float2 a, float2 b, float t) {
  return a + t * (b - a);
}

const int2 offsets[4] = {(int2)(0, 0), (int2)(1, 0), (int2)(0, 1), (int2)(1, 1)};

float2 noise(float2 coords, int seed) {
  int2 i = (int2)(floor(coords.x), floor(coords.y));

  float2 gradients[4];
  for (int j = 0; j < 4; j++) {
    gradients[j] = hash(i.x + offsets[j].x, i.y + offsets[j].y, seed);
  }

  float2 dists[4];
  for (int j = 0; j < 4; j++) {
    dists[j] = coords - (float2)(i.x + offsets[j].x, i.y + offsets[j].y);
  }

  float2 dotProducts[4];
  for (int j = 0; j < 4; j++) {
    dotProducts[j] = dot(dists[j], gradients[j]);
  }

  float x = smoothstep(0.0f, 1.0f, coords.x - i.x);
  float y = smoothstep(0.0f, 1.0f, coords.y - i.y);

  float2 a = lerp(dotProducts[0], dotProducts[1], x);
  float2 b = lerp(dotProducts[2], dotProducts[3], x);

  float2 out = lerp(a, b, y);
  return out * 0.5f + 0.5f;
}

const __constant float longs[4] = {439.0f, 1710.0f, 5474.0f, 2403.0f};
const __constant float shorts[4] = {30.0f, 6.0f, 60.0f, 3.0f};

const float4 applyWavelengths(__constant const float wavelengths[4], int x, int y, const float4 colors[4], const float scale, float4 bias, int seed) {
  for (int i = 0; i < 4; i++) {
    float2 p = (float2)(x, y) / wavelengths[i];
    float2 calc = noise(p, seed);
    bias += colors[i] * calc.x * scale;
  }
  bias.w = 1.0f;
  return bias;
}

__constant const float3 colorDeltas[4] = {
  (float3)(0.0f, 0.1f, 0.0f),
  (float3)(0.0f, 0.0f, 0.1f),
  (float3)(-0.2f, 0.1f, 0.1f),
  (float3)(0.1f, -0.2f, 0.1f)
};

const float4 doStars(__constant const float wavelengths[5], int x, int y, __constant const float biases[5], const float scales[5], int seed) {
  float value = 0.0f;
  float colorInterp = 0.0f;
  for (int i = 0; i < 5; i++) {
    float2 p = (float2)(x, y) / wavelengths[i];
    float2 calc = noise(p, seed);
    calc.x = clamp(calc.x + biases[i], 0.0f, 1.0f) * scales[i];
    value += calc.x;
    colorInterp += calc.y * calc.x;
  }
  value /= 5.0f;
  colorInterp /= 5.0f;
  value = smoothstep(0.52f, 0.73f, value);
  float3 color = mix((float3)(1.2f, 0.9f, 0.9f), (float3)(1.0f, 1.0f, 1.5f), colorInterp);
  return (float4)(color * value, value);
}

const __constant float starBackgroundWavelengths[5] = {2.0f, 3.0f, 5.0f, 15.0f, 100.0f};
const __constant float starForegroundWavelengths[5] = {3.0f, 4.0f, 5.0f, 20.0f, 200.0f};
const __constant float starBiases[5] = {0.0f, -0.1f, 0.0f, -0.4f, -0.4f};
const __constant float starScales[5] = {1.0f, 2.0f, 1.0f, 0.5f, 0.5f};

float4 mixPixels(const float4 a, const float4 b) {
  return (float4)(mix(a.xyz, b.xyz, b.w), 1.0f);
}

float4 calcBackgroundStar(
  const int x,
  const int y,
  __global float4 *backgroundStarFeatures,
  int backgroundStarFeatureCount
) {
  float globularStrength = 0.0f;
  for(int i = 0; i < backgroundStarFeatureCount; i++) {
    float2 coords = (float2)(x, y);
    float2 center = backgroundStarFeatures[i].xy;
    float radius = backgroundStarFeatures[i].z;
    float strength = backgroundStarFeatures[i].w;

    float dist = length(coords - center);
    if (dist > radius) continue;

    float falloff = 1.0f - dist / radius;
    globularStrength += strength * cbrt(falloff);
  }

  // create a copy of the star scales
  float starScalesCopy[5] = {starScales[0], starScales[1], starScales[2], starScales[3], starScales[4]};
  starScalesCopy[0] += globularStrength / 3.0;
  starScalesCopy[1] += globularStrength / 3.0;
  starScalesCopy[4] += globularStrength / 4.0;

  return doStars(starBackgroundWavelengths, x, y, starBiases, starScalesCopy, 525892);
}

float4 calcNebula(
  const int x,
  const int y,
  __global float4 *featureParams,
  __global float4 *featureColors,
  int featureCount,
  int seed
) {
  const float4 allWhite[4] = {(float4)(0.8f, 0.8f, 1.0f, 1.0), (float4)(0.9f, 0.8f, 1.0f, 1.0), (float4)(1.0f, 0.9f, 0.8f, 1.0), (float4)(1.0f, 1.0f, 1.0f, 1.0)};
  float4 nebulaColors[4];

  float3 featureColor = (float3)(0.1f, 0.1f, 0.1f);

  float totalStrength = 0.0f;

  for (int i = 0; i < featureCount; i++) {
    float2 coords = (float2)(x, y);
    float2 center = featureParams[i].xy;
    float radius = featureParams[i].z;
    float strength = featureParams[i].w;

    float dist = length(coords - center);

    float falloff = max(1.0f - dist / (radius * 5.0f), 0.0f);

    float3 color = featureColors[i].xyz;
    
    featureColor += color * strength * (falloff + 0.1f);

    float strengthFalloff = max(1.0f - dist / (radius * 8.0f), 0.0f);

    totalStrength += strength * strengthFalloff;
  }

  float bias = log(totalStrength + 1.0f);

  featureColor = normalize(featureColor);

  nebulaColors[0] = (float4)(featureColor + colorDeltas[0], 1.0f);
  nebulaColors[1] = (float4)(featureColor + colorDeltas[1], 1.0f);
  nebulaColors[2] = (float4)(featureColor + colorDeltas[2], 1.0f);
  nebulaColors[3] = (float4)(featureColor + colorDeltas[3], 1.0f);

  float4 first = applyWavelengths(longs, x, y, allWhite, 1.0f, (float4)(-0.1f, -0.1f, -0.1f, 0.4f), seed);
  float4 second = applyWavelengths(shorts, x, y, nebulaColors, 0.4f, (float4)(1.0f, 1.0f, 1.3f, 0.1f), seed);
  float4 ret = second - first;

  float alpha = clamp(length(clamp(ret.xyz, 0.0f, 1.0f)) * 0.5f, 0.0f, 1.0f);

  return (float4)(ret.xyz, alpha);
}

float4 calcForegroundStar(
  const int x,
  const int y
) {
  float starScalesCopy[5] = {starScales[0], starScales[1], starScales[2], starScales[3], starScales[4]};

  return doStars(starForegroundWavelengths, x, y, starBiases, starScalesCopy, 9268);
}

float4 convolve(
  const int sX,
  const int sY,
  __global float4 *kern,
  int kernelSize,
  float4 kernelSum,
  __global float4 *scratch,
  const unsigned scratchDimension
) {
  float4 sum = (float4)(0.0f, 0.0f, 0.0f, 0.0f);

  for (int i = -kernelSize; i <= kernelSize; i++) {
    for (int j = -kernelSize; j <= kernelSize; j++) {
      float4 value = scratch[(sY + j) * scratchDimension + (sX + i)];
      float4 con = kern[(j + kernelSize) * (kernelSize * 2 + 1) + (i + kernelSize)];
      sum += value * con;
    }
  }

  sum /= kernelSum;

  return sum;
}

__kernel void stargen(
  __global float4 *backgroundStarFeatures,
  int backgroundStarFeatureCount,
__global float4 *nebulaFeatureParams,
  __global float4 *nebulaFeatureColors,
  int nebulaFeatureCount,
  __global float4 *scratch,
  const unsigned scratchOffset,
  __global float4 *scratch2,
  __global float4 *scratch3
) {
  int x = get_global_id(0) - scratchOffset;
  int y = get_global_id(1) - scratchOffset;

  int sX = get_global_id(0) - get_global_offset(0);
  int sY = get_global_id(1) - get_global_offset(1);

  int scratchCoord = sY * get_global_size(0) + sX;

  scratch[scratchCoord] = calcBackgroundStar(
    x,
    y,
    backgroundStarFeatures,
    backgroundStarFeatureCount
  );

  // scratch2[scratchCoord] = scratch[scratchCoord];
  scratch2[scratchCoord] = calcForegroundStar(
    x,
    y
  );

  scratch3[scratchCoord] = calcNebula(
    x,
    y,
    nebulaFeatureParams,
    nebulaFeatureColors,
    nebulaFeatureCount,
    98681
  );
}

__kernel void finalize(
  __global float4 *out,
  __global float4 *backgroundConvolutionKernel,
  int backgroundConvolutionKernelSize,
  float4 backgroundConvolutionKernelSum,
  __global float4 *foregroundConvolutionKernel,
  int foregroundConvolutionKernelSize,
  float4 foregroundConvolutionKernelSum,
  __global float4 *nebulaConvolutionKernel,
  int nebulaConvolutionKernelSize,
  float4 nebulaConvolutionKernelSum,
  __global float4 *scratch,
  const unsigned scratchOffset,
  __global float4 *scratch2,
  __global float4 *scratch3
) {
  int x = get_global_id(0) - scratchOffset;
  int y = get_global_id(1) - scratchOffset;

  bool keep = true;

  int sX = get_global_id(0) - get_global_offset(0);
  int sY = get_global_id(1) - get_global_offset(1);

  int dimension = get_global_size(0) - scratchOffset * 2;

  int fX = sX - scratchOffset;
  int fY = sY - scratchOffset;

  int scratchCoord = sY * get_global_size(0) + sX;
  int flatCoord = (fY * dimension) + fX;

  if (fX < 0 || fY < 0 || fX >= dimension || fY >= dimension) {
    keep = false;
  }

  // Clear the pixel
  float4 pixel = (float4)(0.0f, 0.0f, 0.0f, 1.0f);

  if (keep) {
    pixel = mixPixels(
      pixel,
      convolve(
        sX,
        sY,
        backgroundConvolutionKernel,
        backgroundConvolutionKernelSize,
        backgroundConvolutionKernelSum,
        scratch,
        get_global_size(0)
      )
    );
  }

  float4 value;
  if (keep) {
    value = convolve(
      sX,
      sY,
      nebulaConvolutionKernel,
      nebulaConvolutionKernelSize,
      nebulaConvolutionKernelSum,
      scratch3,
      get_global_size(0)
    );
    pixel.xyz += value.xyz * value.w * 0.0015f;
    pixel.xyz += scratch3[scratchCoord].xyz * scratch3[scratchCoord].w * 0.4f;
  }
 
  if (keep) {
    value = convolve(
      sX,
      sY,
      foregroundConvolutionKernel,
      foregroundConvolutionKernelSize,
      foregroundConvolutionKernelSum,
      scratch2,
      get_global_size(0)
    );
    pixel.xyz += value.xyz * value.w;
  }

  if (keep) {
    out[flatCoord] = pixel;
  }
}